"use strict";(self.webpackChunkstarknet_devnet=self.webpackChunkstarknet_devnet||[]).push([[76],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(k,s(s({ref:t},c),{},{components:n})):a.createElement(k,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7091:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:6},s="L1-L2 Postman integration",i={unversionedId:"guide/postman",id:"guide/postman",title:"L1-L2 Postman integration",description:"Postman is a StarkNet utility that allows testing L1  L2 interaction. To utilize this, you can use starknet-hardhat-plugin, as witnessed in this example. Or you can directly interact with the two Postman-specific endpoints:",source:"@site/docs/guide/postman.md",sourceDirName:"guide",slug:"/guide/postman",permalink:"/starknet-devnet/docs/guide/postman",draft:!1,editUrl:"https://github.com/Shard-Labs/starknet-devnet/blob/master/page/docs/guide/postman.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Hardhat integration",permalink:"/starknet-devnet/docs/guide/hardhat-integration"},next:{title:"Block explorer",permalink:"/starknet-devnet/docs/guide/block-explorer"}},l={},p=[{value:"Postman - Load",id:"postman---load",level:3},{value:"Postman - Flush",id:"postman---flush",level:3},{value:"Postman - disclaimer",id:"postman---disclaimer",level:3},{value:"Postman - l1 to l2 mock endpoint",id:"postman---l1-to-l2-mock-endpoint",level:3},{value:"Postman - l2 to l1 mock endpoint",id:"postman---l2-to-l1-mock-endpoint",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"l1-l2-postman-integration"},"L1-L2 Postman integration"),(0,r.kt)("p",null,"Postman is a StarkNet utility that allows testing L1 <-> L2 interaction. To utilize this, you can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Shard-Labs/starknet-hardhat-plugin"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"starknet-hardhat-plugin"))),", as witnessed in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Shard-Labs/starknet-hardhat-example/blob/master/test/postman.test.ts"},(0,r.kt)("strong",{parentName:"a"},"this example")),". Or you can directly interact with the two Postman-specific endpoints:"),(0,r.kt)("h3",{id:"postman---load"},"Postman - Load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'POST /postman/load_l1_messaging_contract\n{\n  "networkUrl": "http://localhost:8545",\n  "address": "0x123...def"\n}\n')),(0,r.kt)("p",null,"Loads a ",(0,r.kt)("inlineCode",{parentName:"p"},"StarknetMockMessaging")," contract. The ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," parameter is optional; if provided, the ",(0,r.kt)("inlineCode",{parentName:"p"},"StarknetMockMessaging")," contract will be fetched from that address, otherwise a new one will be deployed."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"networkUrl")," is the URL of the JSON-RPC API of the L1 node you've run locally or that already exists; possibilities include, and are not limited to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://goerli.net/"},(0,r.kt)("strong",{parentName:"a"},"Goerli testnet"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/ganache"},(0,r.kt)("strong",{parentName:"a"},"Ganache"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethereum/go-ethereum#docker-quick-start"},(0,r.kt)("strong",{parentName:"a"},"Geth"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hardhat.org/hardhat-network/#running-stand-alone-in-order-to-support-wallets-and-other-software"},(0,r.kt)("strong",{parentName:"a"},"Hardhat node")),".")),(0,r.kt)("h3",{id:"postman---flush"},"Postman - Flush"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /postman/flush\n")),(0,r.kt)("p",null,"Goes through the newly enqueued messages, sending them from L1 to L2 and from L2 to L1. Requires no body."),(0,r.kt)("h3",{id:"postman---disclaimer"},"Postman - disclaimer"),(0,r.kt)("p",null,"This method of L1 <-> L2 communication testing differs from StarkNet Alpha networks. Taking the ",(0,r.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/_static/L1L2Example.sol"},(0,r.kt)("strong",{parentName:"a"},"L1 L2 Example .sol"))," contract in the ",(0,r.kt)("a",{parentName:"p",href:"https://www.cairo-lang.org/docs/hello_starknet/l1l2.html"},(0,r.kt)("strong",{parentName:"a"},"starknet documentation"))," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"constructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n")),(0,r.kt)("p",null,"The constructor takes an ",(0,r.kt)("inlineCode",{parentName:"p"},"IStarknetCore")," contract as argument, however for Devnet L1 <-> L2 communication testing, this will have to be replaced with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/testing/MockStarknetMessaging.sol"},(0,r.kt)("strong",{parentName:"a"},"MockStarknetMessaging.sol"))," contract :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"constructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n")),(0,r.kt)("h3",{id:"postman---l1-to-l2-mock-endpoint"},"Postman - l1 to l2 mock endpoint"),(0,r.kt)("p",null,"Sending mock transactions from L1 to L2 without the need for running L1. Deployed L2 contract address ",(0,r.kt)("inlineCode",{parentName:"p"},"l2_contract_address")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"entry_point_selector")," must be valid otherwise new block will not be created."),(0,r.kt)("p",null,"Normally ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce")," is calculated by L1 StarknetContract and it's used in L1 and L2. In this case, we need to provide it manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /postman/send_message_to_l2\n")),(0,r.kt)("p",null,"Request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "l2_contract_address":"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2",\n    "entry_point_selector":"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01",\n    "l1_contract_address":"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n    "payload":[\n      "0x1",\n      "0x2"\n    ],\n    "nonce":"0x0"\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{"transaction_hash": "0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb"}\n')),(0,r.kt)("h3",{id:"postman---l2-to-l1-mock-endpoint"},"Postman - l2 to l1 mock endpoint"),(0,r.kt)("p",null,"Sending mock transactions from L2 to L1.\nDeployed L2 contract address ",(0,r.kt)("inlineCode",{parentName:"p"},"l2_contract_address")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"l1_contract_address")," must be valid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /postman/consume_message_from_l2\n")),(0,r.kt)("p",null,"Request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "l2_contract_address": "0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2",\n    "l1_contract_address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",\n    "payload": ["0x0", "0x1", "0x3e8"],\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{"message_hash": "0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d"}\n')))}d.isMDXComponent=!0}}]);