"use strict";(self.webpackChunkstarknet_devnet=self.webpackChunkstarknet_devnet||[]).push([[398],{3905:(e,t,n)=>{n.d(t,{Zo:()=>b,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(n),k=r,u=p["".concat(i,".").concat(k)]||p[k]||d[k]||o;return n?a.createElement(u,l(l({ref:t},b),{},{components:n})):a.createElement(u,l({ref:t},b))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:8},l="Blocks",c={unversionedId:"guide/blocks",id:"guide/blocks",title:"Blocks",description:'Devnet starts with a genesis block (with block number equal to 0 and block hash equal to "0x0").',source:"@site/docs/guide/blocks.md",sourceDirName:"guide",slug:"/guide/blocks",permalink:"/starknet-devnet/docs/guide/blocks",draft:!1,editUrl:"https://github.com/0xSpaceShard/starknet-devnet/blob/master/page/docs/guide/blocks.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Block explorer",permalink:"/starknet-devnet/docs/guide/block-explorer"},next:{title:"Lite mode",permalink:"/starknet-devnet/docs/guide/lite-mode"}},i={},s=[{value:"Create an empty block",id:"create-an-empty-block",level:3},{value:"Create a block on demand",id:"create-a-block-on-demand",level:3},{value:"Abort blocks",id:"abort-blocks",level:3}],b={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blocks"},"Blocks"),(0,r.kt)("p",null,"Devnet starts with a genesis block (with block number equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and block hash equal to ",(0,r.kt)("inlineCode",{parentName:"p"},'"0x0"'),")."),(0,r.kt)("p",null,"A new block is generated with each new transaction unless you opt for ",(0,r.kt)("a",{parentName:"p",href:"#create-a-block-on-demand"},"creating blocks on demand"),"."),(0,r.kt)("h3",{id:"create-an-empty-block"},"Create an empty block"),(0,r.kt)("p",null,"To create an empty block without transactions, ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," a request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/create_block"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /create_block\n")),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{'block_hash': '0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67'}\n")),(0,r.kt)("h3",{id:"create-a-block-on-demand"},"Create a block on demand"),(0,r.kt)("p",null,"If you start Devnet with ",(0,r.kt)("inlineCode",{parentName:"p"},"--blocks-on-demand")," CLI option, all transactions will be pending and stored in a pending block (targetable via block ID ",(0,r.kt)("inlineCode",{parentName:"p"},'"pending"'),").\nTo create a block on demand, send a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/create_block"),". This will convert the pending block to the latest block (targetable via block ID ",(0,r.kt)("inlineCode",{parentName:"p"},'"latest"'),"), giving it a block hash and a block number. All subsequent transactions will be stored to a new pending block."),(0,r.kt)("p",null,"In case of demanding block creation with no pending transactions, a new empty block will be generated."),(0,r.kt)("p",null,"The creation of the genesis block is not affected by this feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /create_block\n")),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{'block_hash': '0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67'}\n")),(0,r.kt)("h3",{id:"abort-blocks"},"Abort blocks"),(0,r.kt)("p",null,"This functionality allows to simulate block abortion that can occur on mainnet."),(0,r.kt)("p",null,"You can abort blocks and reject transactions from the specified block to the currently latest block. Newly created blocks after the abortion will have accepted status and will continue with numbering where the last accepted block left off."),(0,r.kt)("p",null,"The state of Devnet will be reverted to the state of the last accepted block. In block-on-demand mode, the pending block will be mined and aborted."),(0,r.kt)("p",null,"E.g. assume there are 3 accepted blocks numbered 1, 2 and 3. Upon receiving a request to abort blocks starting with block 2, the blocks numbered 2 and 3 are aborted and their transactions rejected. The state of network will be as it was in block 1. Once a new block is mined, it will be accepted and it will have number 2."),(0,r.kt)("p",null,"Aborted blocks can only be queried by block hash. Aborting the genesis block, blocks in forking origin and already aborted blocks is not supported and results in an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'POST /abort_blocks\n{\n    "startingBlockHash": BLOCK_HASH\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    "aborted": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n')))}d.isMDXComponent=!0}}]);